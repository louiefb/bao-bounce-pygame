import os
import sys
import random
import pygame
from pygame.locals import *

os.environ["SDL_VIDEO_CENTERED"] = "True"

class Player(pygame.sprite.Sprite):
    x_ = 30
    y_ = 20
    def __init__(self):
        super(Player, self).__init__()
        self.surf = pygame.Surface((self.x_, self.y_))
        self.surf.fill((255, 255, 255))
        self.rect = self.surf.get_rect(center=(x/2, y/2))
        self.delay = 0
        self.timekeep = 0

    def update(self, pressed_keys):
        global coeff
        global restitution
        global gravity
        global momentum
        global slippery
        global sensitivity
        global momentum_flag
        global slippery_flag
        global wallbounce_flag
        
        if gravity_flag == True:
            self.rect.move_ip(0, coeff)
        if momentum_flag == True:
            self.rect.move_ip(momentum, 0)

        if pressed_keys[K_DOWN]:
            self.rect.move_ip(0, sensitivity)
        if pressed_keys[K_LEFT]:
            self.rect.move_ip(-sensitivity, 0)
            if momentum_flag == True:
                momentum -= traction*sensitivity
        if pressed_keys[K_RIGHT]:
            self.rect.move_ip(sensitivity, 0)
            if momentum_flag == True:
                momentum += traction*sensitivity
        if self.rect.left <= 0:
            self.rect.left = 0
            if wallbounce_flag == True:
                momentum = -momentum/2
            else:
                momentum = 0
        if self.rect.right >= x:
            self.rect.right = x
            if wallbounce_flag == True:
                momentum = -momentum/2
            else:
                momentum = 0
        if self.rect.top <= 0:
            self.rect.top = 0
            if gravity_flag == True:
                gravity *= 2
                self.timekeep = pygame.time.get_ticks()
                self.delay = 300
                slippery = True
        if self.rect.bottom >= y:
            if gravity_flag == True:
                self.rect.bottom = y-(restitution)
                restitution = restitution/2
                coeff = 1
                slippery = slippery_flag
            else:
                self.rect.bottom = y

    def jump(self, pressed_keys):
        global coeff
        global restitution
        global gravity
        now = pygame.time.get_ticks()
        if pressed_keys[K_UP]:
            if gravity_flag == True:
                if now - self.timekeep >= self.delay:
                    self.timekeep = 0
                    coeff = 5
                    self.rect.move_ip(0, -restitution)
                    gravity = 2
                    restitution = 6*sensitivity
            else:
                self.rect.move_ip(0, -sensitivity)

class NPC_Right(pygame.sprite.Sprite):
    x_ = 20
    y_ = 20
    def __init__(self):
        super(NPC_Right, self).__init__()
        self.surf = pygame.Surface((self.x_, self.y_))
        self.surf.fill((255, 255, 255))
        self.rect = self.surf.get_rect(center=(x, random.randint(0,y)))
        self.x_speed = random.randint(1,10)
        self.y_speed = random.randint(-5,5)

    def update(self):
        self.rect.move_ip(-self.x_speed, self.y_speed)
        if self.rect.right <= 0:
            self.kill()

class NPC_Left(pygame.sprite.Sprite):
    x_ = 20
    y_ = 20
    def __init__(self):
        super(NPC_Left, self).__init__()
        self.surf = pygame.Surface((self.x_, self.y_))
        self.surf.fill((255, 255, 255))
        self.rect = self.surf.get_rect(center=(0, random.randint(0,y)))
        self.x_speed = random.randint(1,10)
        self.y_speed = random.randint(-5,5)

    def update(self):
        self.rect.move_ip(self.x_speed, self.y_speed)
        if self.rect.left >= x:
            self.kill()

class NPC_Top(pygame.sprite.Sprite):
    x_ = 20
    y_ = 20
    def __init__(self):
        super(NPC_Top, self).__init__()
        self.surf = pygame.Surface((self.x_, self.y_))
        self.surf.fill((255, 255, 255))
        self.rect = self.surf.get_rect(center=(random.randint(0,x), 0))
        self.x_speed = random.randint(-5,5)
        self.y_speed = random.randint(1,10)

    def update(self):
        self.rect.move_ip(self.x_speed, self.y_speed)
        if self.rect.top >= y:
            self.kill()

x = 1000
y = 800

leftspawn = True
rightspawn = True
topspawn = True
spawnfrequency = 500 #in milliseconds; easy: 1500 med: 1000 hard: 500
sensitivity = 15 #movement in pixels; 15 is default, min could be 10, max is 30
traction = 0.3 #higher traction for higher value; default is 0.3; 0 is possible but it is equal to no momentum, no wallbounce, perfect stickiness; max is maybe 2.0
gravity_flag = True #True is default
momentum_flag = True #True is default
wallbounce_flag = True #True for wall bounce; False disables momentum off wall
slippery_flag = False #False for sticky floor (realistic); True for slippery floor (not realistic)

coeff = 1
gravity = 2
momentum = 0
restitution = 6*sensitivity
slippery = True

pygame.init()
screen = pygame.display.set_mode((x, y), pygame.NOFRAME)

player = Player()
sprites_player = pygame.sprite.Group()
sprites_player.add(player)
sprites_npc = pygame.sprite.Group()
sprites = pygame.sprite.Group()
sprites.add(player)

ENABLEJUMP = pygame.USEREVENT + 1
pygame.time.set_timer(ENABLEJUMP, 50)

SPAWNLNPC = pygame.USEREVENT + 2
pygame.time.set_timer(SPAWNLNPC, spawnfrequency)

SPAWNRNPC = pygame.USEREVENT + 3
pygame.time.set_timer(SPAWNRNPC, spawnfrequency)

SPAWNTNPC = pygame.USEREVENT + 4
pygame.time.set_timer(SPAWNTNPC, spawnfrequency)

run = True
while run:
    clock = pygame.time.Clock()
    clock.tick(30)
    if coeff != 100:
        coeff += gravity
    if slippery == False:
        if momentum > 0:
            momentum -= traction
        elif momentum < 0:
            momentum += traction
    for event in pygame.event.get():
        if event.type == KEYDOWN:
            if event.key == K_ESCAPE:
                running = False
                pygame.quit()
                sys.exit()
        elif event.type == QUIT:
            running = False
            pygame.quit()
            sys.exit()
        elif event.type == ENABLEJUMP:
            pressed_keys = pygame.key.get_pressed()
            player.jump(pressed_keys)
        elif (event.type == SPAWNRNPC) and (rightspawn == True):
            npc = NPC_Right()
            sprites_npc.add(npc)
            sprites.add(npc)
        elif (event.type == SPAWNLNPC) and (leftspawn == True):
            npc = NPC_Left()
            sprites_npc.add(npc)
            sprites.add(npc)
        elif (event.type == SPAWNTNPC) and (topspawn == True):
            npc = NPC_Top()
            sprites_npc.add(npc)
            sprites.add(npc)

    pressed_keys = pygame.key.get_pressed()
    screen.fill((0,0,0))
    player.update(pressed_keys)
    sprites_npc.update()
    for i in sprites:
        screen.blit(i.surf, i.rect)
    if pygame.sprite.spritecollideany(player, sprites_npc):
        player.kill()
        pass
    pygame.display.flip()

#fixed. only needs hitbox lesson
